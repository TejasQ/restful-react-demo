/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface Pagination {
  offset?: number;
  total_count?: number;
  count?: number;
}

export interface Meta {
  msg?: string;
  status?: number;
  response_id?: string;
}

export interface User {
  avatar_url?: string;
  banner_url?: string;
  profile_url?: string;
  username?: string;
  display_name?: string;
  twitter?: string;
}

export interface Image {
  url?: string;
  width?: string;
  height?: string;
  size?: string;
  frames?: string;
  mp4?: string;
  mp4_size?: string;
  webp?: string;
  webp_size?: string;
}

export interface Gif {
  type?: "gif";
  id?: string;
  slug?: string;
  url?: string;
  bitly_url?: string;
  embded_url?: string;
  username?: string;
  source?: string;
  rating?: string;
  content_url?: string;
  tags?: string[];
  featured_tags?: string[];
  user?: User;
  source_tld?: string;
  source_post_url?: string;
  update_datetime?: string;
  create_datetime?: string;
  import_datetime?: string;
  trending_datetime?: string;
  images?: {
    fixed_height?: Image;
    fixed_height_still?: Image;
    fixed_height_downsampled?: Image;
    fixed_width?: Image;
    fixed_width_still?: Image;
    fixed_width_downsampled?: Image;
    fixed_height_small?: Image;
    fixed_height_small_still?: Image;
    fixed_width_small?: Image;
    fixed_width_small_still?: Image;
    downsized?: Image;
    downsized_still?: Image;
    downsized_large?: Image;
    downsized_medium?: Image;
    downsized_small?: Image;
    original?: Image;
    original_still?: Image;
    looping?: Image;
    preview?: Image;
    preview_gif?: Image;
  };
}

export type BadRequestResponse = void;

export type ForbiddenResponse = void;

export type NotFoundResponse = void;

export type TooManyRequestsResponse = void;

export interface SearchGifsResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface SearchGifsQueryParams {
  q: string;
  limit?: number;
  offset?: number;
  rating?: string;
  lang?: string;
}

export type SearchGifsProps = Omit<
  GetProps<
    SearchGifsResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    SearchGifsQueryParams
  >,
  "path"
>;

// Search GIFs
export const SearchGifs = (props: SearchGifsProps) => (
  <Get<
    SearchGifsResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    SearchGifsQueryParams
  >
    path={`/gifs/search`}
    {...props}
  />
);

export type UseSearchGifsProps = Omit<UseGetProps<SearchGifsResponse, SearchGifsQueryParams>, "path">;

// Search GIFs
export const useSearchGifs = (props: UseSearchGifsProps) =>
  useGet<
    SearchGifsResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    SearchGifsQueryParams
  >(`/gifs/search`, props);

export interface TrendingGifsResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface TrendingGifsQueryParams {
  limit?: number;
  offset?: number;
  rating?: string;
}

export type TrendingGifsProps = Omit<
  GetProps<
    TrendingGifsResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TrendingGifsQueryParams
  >,
  "path"
>;

// Trending GIFs
export const TrendingGifs = (props: TrendingGifsProps) => (
  <Get<
    TrendingGifsResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TrendingGifsQueryParams
  >
    path={`/gifs/trending`}
    {...props}
  />
);

export type UseTrendingGifsProps = Omit<UseGetProps<TrendingGifsResponse, TrendingGifsQueryParams>, "path">;

// Trending GIFs
export const useTrendingGifs = (props: UseTrendingGifsProps) =>
  useGet<
    TrendingGifsResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TrendingGifsQueryParams
  >(`/gifs/trending`, props);

export interface TranslateGifResponse {
  data?: Gif;
  meta?: Meta;
}

export interface TranslateGifQueryParams {
  s: string;
}

export type TranslateGifProps = Omit<
  GetProps<
    TranslateGifResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TranslateGifQueryParams
  >,
  "path"
>;

// Translate phrase to GIF
export const TranslateGif = (props: TranslateGifProps) => (
  <Get<
    TranslateGifResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TranslateGifQueryParams
  >
    path={`/gifs/translate`}
    {...props}
  />
);

export type UseTranslateGifProps = Omit<UseGetProps<TranslateGifResponse, TranslateGifQueryParams>, "path">;

// Translate phrase to GIF
export const useTranslateGif = (props: UseTranslateGifProps) =>
  useGet<
    TranslateGifResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TranslateGifQueryParams
  >(`/gifs/translate`, props);

export interface RandomGifResponse {
  data?: Gif;
  meta?: Meta;
}

export interface RandomGifQueryParams {
  tag?: string;
  rating?: string;
}

export type RandomGifProps = Omit<
  GetProps<
    RandomGifResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    RandomGifQueryParams
  >,
  "path"
>;

// Random GIF
export const RandomGif = (props: RandomGifProps) => (
  <Get<
    RandomGifResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    RandomGifQueryParams
  >
    path={`/gifs/random`}
    {...props}
  />
);

export type UseRandomGifProps = Omit<UseGetProps<RandomGifResponse, RandomGifQueryParams>, "path">;

// Random GIF
export const useRandomGif = (props: UseRandomGifProps) =>
  useGet<
    RandomGifResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    RandomGifQueryParams
  >(`/gifs/random`, props);

export interface GetGifByIdResponse {
  data?: Gif;
  meta?: Meta;
}

export type GetGifByIdProps = Omit<
  GetProps<
    GetGifByIdResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    void
  >,
  "path"
> & { gifId: number };

// Get GIF by Id
export const GetGifById = ({ gifId, ...props }: GetGifByIdProps) => (
  <Get<GetGifByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, void>
    path={`/gifs/${gifId}`}
    {...props}
  />
);

export type UseGetGifByIdProps = Omit<UseGetProps<GetGifByIdResponse, void>, "path"> & { gifId: number };

// Get GIF by Id
export const useGetGifById = ({ gifId, ...props }: UseGetGifByIdProps) =>
  useGet<GetGifByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, void>(
    `/gifs/${gifId}`,
    props,
  );

export interface GetGifsByIdResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface GetGifsByIdQueryParams {
  ids?: string;
}

export type GetGifsByIdProps = Omit<
  GetProps<
    GetGifsByIdResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    GetGifsByIdQueryParams
  >,
  "path"
>;

// Get GIFs by ID
export const GetGifsById = (props: GetGifsByIdProps) => (
  <Get<
    GetGifsByIdResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    GetGifsByIdQueryParams
  >
    path={`/gifs`}
    {...props}
  />
);

export type UseGetGifsByIdProps = Omit<UseGetProps<GetGifsByIdResponse, GetGifsByIdQueryParams>, "path">;

// Get GIFs by ID
export const useGetGifsById = (props: UseGetGifsByIdProps) =>
  useGet<
    GetGifsByIdResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    GetGifsByIdQueryParams
  >(`/gifs`, props);

export interface SearchStickersResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface SearchStickersQueryParams {
  q: string;
  limit?: number;
  offset?: number;
  rating?: string;
  lang?: string;
}

export type SearchStickersProps = Omit<
  GetProps<
    SearchStickersResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    SearchStickersQueryParams
  >,
  "path"
>;

// Search Stickers
export const SearchStickers = (props: SearchStickersProps) => (
  <Get<
    SearchStickersResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    SearchStickersQueryParams
  >
    path={`/stickers/search`}
    {...props}
  />
);

export type UseSearchStickersProps = Omit<UseGetProps<SearchStickersResponse, SearchStickersQueryParams>, "path">;

// Search Stickers
export const useSearchStickers = (props: UseSearchStickersProps) =>
  useGet<
    SearchStickersResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    SearchStickersQueryParams
  >(`/stickers/search`, props);

export interface TrendingStickersResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface TrendingStickersQueryParams {
  limit?: number;
  offset?: number;
  rating?: string;
}

export type TrendingStickersProps = Omit<
  GetProps<
    TrendingStickersResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TrendingStickersQueryParams
  >,
  "path"
>;

// Trending Stickers
export const TrendingStickers = (props: TrendingStickersProps) => (
  <Get<
    TrendingStickersResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TrendingStickersQueryParams
  >
    path={`/stickers/trending`}
    {...props}
  />
);

export type UseTrendingStickersProps = Omit<UseGetProps<TrendingStickersResponse, TrendingStickersQueryParams>, "path">;

// Trending Stickers
export const useTrendingStickers = (props: UseTrendingStickersProps) =>
  useGet<
    TrendingStickersResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TrendingStickersQueryParams
  >(`/stickers/trending`, props);

export interface TranslateStickerResponse {
  data?: Gif;
  meta?: Meta;
}

export interface TranslateStickerQueryParams {
  s: string;
}

export type TranslateStickerProps = Omit<
  GetProps<
    TranslateStickerResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TranslateStickerQueryParams
  >,
  "path"
>;

// Translate phrase to Sticker
export const TranslateSticker = (props: TranslateStickerProps) => (
  <Get<
    TranslateStickerResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TranslateStickerQueryParams
  >
    path={`/stickers/translate`}
    {...props}
  />
);

export type UseTranslateStickerProps = Omit<UseGetProps<TranslateStickerResponse, TranslateStickerQueryParams>, "path">;

// Translate phrase to Sticker
export const useTranslateSticker = (props: UseTranslateStickerProps) =>
  useGet<
    TranslateStickerResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    TranslateStickerQueryParams
  >(`/stickers/translate`, props);

export interface RandomStickerResponse {
  data?: Gif;
  meta?: Meta;
}

export interface RandomStickerQueryParams {
  tag?: string;
  rating?: string;
}

export type RandomStickerProps = Omit<
  GetProps<
    RandomStickerResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    RandomStickerQueryParams
  >,
  "path"
>;

// Random Sticker
export const RandomSticker = (props: RandomStickerProps) => (
  <Get<
    RandomStickerResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    RandomStickerQueryParams
  >
    path={`/stickers/random`}
    {...props}
  />
);

export type UseRandomStickerProps = Omit<UseGetProps<RandomStickerResponse, RandomStickerQueryParams>, "path">;

// Random Sticker
export const useRandomSticker = (props: UseRandomStickerProps) =>
  useGet<
    RandomStickerResponse,
    BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse,
    RandomStickerQueryParams
  >(`/stickers/random`, props);
